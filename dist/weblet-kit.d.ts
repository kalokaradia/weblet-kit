import * as v from "./validators.js";
export declare const utils: {
    formatDate: (date: Date, format?: string) => string;
    generateRandomId: (length?: number) => string;
    capitalize: (str: string) => string;
    escapeHTML: (str: string) => string;
    debounce: <T extends (...args: any[]) => any>(func: T, delay: number) => ((...args: Parameters<T>) => void);
    throttle: <T extends (...args: any[]) => any>(func: T, limit: number) => ((...args: Parameters<T>) => void);
    shuffleArray: <T>(arr: T[]) => T[];
    average: (arr: number[]) => number;
    sortNumbers: (arr: number[], order?: "asc" | "desc") => number[];
    isPalindrome: (str: string) => boolean;
    chunkArray: <T>(array: T[], size: number) => T[][];
    deepClone: <T>(value: T) => T;
    range: (start: number, end: number, step?: number) => number[];
    arrayMax: (arr: number[]) => number | undefined;
    arrayMin: (arr: number[]) => number | undefined;
};
export declare const validators: {
    isAlpha(text: unknown): boolean;
    isNumeric(text: unknown): boolean;
    isHexColor(text: unknown): boolean;
    isJSON(value: unknown): boolean;
    isIP(text: unknown): boolean;
    isDomain(text: unknown): boolean;
    isPhoneNumber(text: unknown): boolean;
    isCreditCard(text: unknown): boolean;
    _normalizeDate(date: unknown): Date | null;
    isFutureDate(date: unknown): boolean;
    isPastDate(date: unknown): boolean;
    isDateBefore(date: unknown, comparisonDate: unknown): boolean;
    isDateAfter(date: unknown, comparisonDate: unknown): boolean;
    isEmail: (str: unknown) => boolean;
    isURL: (str: unknown) => boolean;
    isUUID: (str: unknown) => boolean;
    isStrongPassword: (str: unknown, options?: v.StrongPasswordOptions) => boolean;
    isNumber: (val: unknown) => boolean;
    isInteger: (val: unknown) => boolean;
    isBoolean: (val: unknown) => boolean;
    isDate: (val: unknown) => boolean;
    isEmpty: (val: unknown) => boolean;
    isAlphanumeric: (str: unknown) => boolean;
};
declare const _default: {
    utils: {
        formatDate: (date: Date, format?: string) => string;
        generateRandomId: (length?: number) => string;
        capitalize: (str: string) => string;
        escapeHTML: (str: string) => string;
        debounce: <T extends (...args: any[]) => any>(func: T, delay: number) => ((...args: Parameters<T>) => void);
        throttle: <T extends (...args: any[]) => any>(func: T, limit: number) => ((...args: Parameters<T>) => void);
        shuffleArray: <T>(arr: T[]) => T[];
        average: (arr: number[]) => number;
        sortNumbers: (arr: number[], order?: "asc" | "desc") => number[];
        isPalindrome: (str: string) => boolean;
        chunkArray: <T>(array: T[], size: number) => T[][];
        deepClone: <T>(value: T) => T;
        range: (start: number, end: number, step?: number) => number[];
        arrayMax: (arr: number[]) => number | undefined;
        arrayMin: (arr: number[]) => number | undefined;
    };
    validators: {
        isAlpha(text: unknown): boolean;
        isNumeric(text: unknown): boolean;
        isHexColor(text: unknown): boolean;
        isJSON(value: unknown): boolean;
        isIP(text: unknown): boolean;
        isDomain(text: unknown): boolean;
        isPhoneNumber(text: unknown): boolean;
        isCreditCard(text: unknown): boolean;
        _normalizeDate(date: unknown): Date | null;
        isFutureDate(date: unknown): boolean;
        isPastDate(date: unknown): boolean;
        isDateBefore(date: unknown, comparisonDate: unknown): boolean;
        isDateAfter(date: unknown, comparisonDate: unknown): boolean;
        isEmail: (str: unknown) => boolean;
        isURL: (str: unknown) => boolean;
        isUUID: (str: unknown) => boolean;
        isStrongPassword: (str: unknown, options?: v.StrongPasswordOptions) => boolean;
        isNumber: (val: unknown) => boolean;
        isInteger: (val: unknown) => boolean;
        isBoolean: (val: unknown) => boolean;
        isDate: (val: unknown) => boolean;
        isEmpty: (val: unknown) => boolean;
        isAlphanumeric: (str: unknown) => boolean;
    };
};
export default _default;
